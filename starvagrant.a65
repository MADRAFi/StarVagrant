STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

	org $80

	.print 'ZPFREE: $0000..',*-1

fxptr	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4

	.print 'ZPFREE: ',*,'..',$ff

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

.local	RESOURCE
	icl 'res6502.asm'

	RCASM 'dlist_menu.asm' DISPLAY_LIST_ADDRESS_MENU 0 0 0 0 0 0 0 0
	RCASM 'dlist_console.asm' DISPLAY_LIST_ADDRESS_CONSOLE 0 0 0 0 0 0 0 0
	RCASM 'strings.asm' STRINGS_ADDRESS 0 0 0 0 0 0 0 0
	RCASM 'locations.asm' LOCATIONS_ADDRESS 0 0 0 0 0 0 0 0
	RCASM 'items.asm' ITEMS_ADDRESS 0 0 0 0 0 0 0 0
	RMTPLAY 'assets/titlemusic.feat' RMT_PLAYER_ADDRESS 1 0 0 0 0 0 0 0
	RMT 'assets/titlemusic.rmt' RMT_MODULE_ADDRESS 0 0 0 0 0 0 0 0
	RCDATA 'assets/StarVagrand-3.dat' GFX_ADDRESS 0 0 0 0 0 0 0 0
.endl

; -----------------------------------------------------------

	org CODEORIGIN

	STATICDATA

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

	ift DATAORIGIN+VARINITSIZE > $BFFF
	ert 'Invalid memory address range ',DATAORIGIN+VARINITSIZE
	els
	@fill #DATAORIGIN+VARINITSIZE #VARDATASIZE-VARINITSIZE #0
	eif

	ldx #$0f
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	mvx #$00 bp					; lo BP = 0, X = 0 !!!

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	ift l_00E5-*>3
	jmp l_00E5
	eif

; -----------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 004  ---------------------

	ldy #0
	mva (edx),y Result


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000A

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 005  ---------------------

	ldy #0
	mva (edx),y Result
	iny
	mva (edx),y Result+1


@exit

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 2

	rts						; ret
.endl

.local	STR						; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x S
	mva :STACKORIGIN+STACKWIDTH,x S+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	mva :STACKORIGIN+STACKWIDTH*2,x A+2
	mva :STACKORIGIN+STACKWIDTH*3,x A+3
	dex						; sub bx, 1


; ---------------------  ASM Block 020  ---------------------

	txa:pha

	inx

	@ValueToStr #@printINT

	@move #@buf s #16	; !!! koniecznie przez wskaznik

	pla:tax


; -----------------------------------------------------------

A	= DATAORIGIN+$000D
S	= DATAORIGIN+$0011

@VarData	= A
@VarDataSize	= 6


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	FILLCHAR_011F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 024  ---------------------

	jsr @fill


; -----------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; -----------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $0004
MGTIA	= $0000
MVBXE	= $0080
WINDOW	= $0010
NARROW	= $0020
VBXE_XDLADR	= $0000
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $0000
IVBL	= $0001
CH_DELCHR	= $00FE
CH_ENTER	= $009B
CH_ESC	= $001B
CH_CURS_UP	= $001C
CH_CURS_DOWN	= $001D
CH_CURS_LEFT	= $001E
CH_CURS_RIGHT	= $001F
CH_TAB	= $007F
CH_EOL	= $009B
CH_CLR	= $007D
CH_BELL	= $00FD
CH_DEL	= $007E
CH_DELLINE	= $009C
CH_INSLINE	= $009D
COLOR_BLACK	= $0000
COLOR_WHITE	= $000E
COLOR_RED	= $0032
COLOR_CYAN	= $0096
COLOR_VIOLET	= $0068
COLOR_GREEN	= $00C4
COLOR_BLUE	= $0074
COLOR_YELLOW	= $00EE
COLOR_ORANGE	= $004A
COLOR_BROWN	= $00E4
COLOR_LIGHTRED	= $003C
COLOR_GRAY1	= $0004
COLOR_GRAY2	= $0006
COLOR_GRAY3	= $000A
COLOR_LIGHTGREEN	= $00CC
COLOR_LIGHTBLUE	= $007C
FMOPENREAD	= $0004
FMOPENWRITE	= $0008
FMOPENAPPEND	= $0009
FMOPENREADWRITE	= $000C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
FILEMODE	= DATAORIGIN+$0004
SCREENMODE	= DATAORIGIN+$0005
IORESULT	= DATAORIGIN+$0006
EOLN	= DATAORIGIN+$0007
RNDSEED	= DATAORIGIN+$0008

.endl							; UNIT SYSTEM

; -----------------------------------------------------------

.local	ATARI						; UNIT

; -----------------------------------------------------------

RTCLOK	= $0012
ATRACT	= $004D
LMARGIN	= $0052
RMARGIN	= $0053
ROWCRS	= $0054
COLCRS	= $0055
DINDEX	= $0057
SAVMSC	= $0058
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; -----------------------------------------------------------

.local	CRT						; UNIT

.local	CURSOROFF					; PROCEDURE

	ift l_013E-*>3
	jmp l_013E
	eif

; IfThenEpilog
l_013E

; optimize OK (CRT), line = 116

	mva #$01 ATARI.CRSINH

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $0000001F (31)

	inx						; add bx, 1
	mva #$1F :STACKORIGIN,x

	@printCHAR
	dex						; sub bx, 1

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $0000001E (30)

	inx						; add bx, 1
	mva #$1E :STACKORIGIN,x

	@printCHAR
	dex						; sub bx, 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	CURSORON					; PROCEDURE

	ift l_0155-*>3
	jmp l_0155
	eif

; IfThenEpilog
l_0155

; optimize OK (CRT), line = 129

	mva #$00 ATARI.CRSINH

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $0000001F (31)

	inx						; add bx, 1
	mva #$1F :STACKORIGIN,x

	@printCHAR
	dex						; sub bx, 1

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $0000001E (30)

	inx						; add bx, 1
	mva #$1E :STACKORIGIN,x

	@printCHAR
	dex						; sub bx, 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	READKEY						; FUNCTION | ASSEMBLER


; ---------------------  ASM Block 046  ---------------------

	txa:pha

	@GetKey

	sta Result

	pla:tax


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$0014

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	TEXTBACKGROUND					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x A
	dex						; sub bx, 1


; ---------------------  ASM Block 047  ---------------------

	mwa a colpf2s


; -----------------------------------------------------------

A	= DATAORIGIN+$0015

@VarData	= A
@VarDataSize	= 1


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	TEXTCOLOR					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x A
	dex						; sub bx, 1


; ---------------------  ASM Block 048  ---------------------

	mva a colpf1s


; -----------------------------------------------------------

A	= DATAORIGIN+$0016

@VarData	= A
@VarDataSize	= 1


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DELAY						; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1


; ---------------------  ASM Block 049  ---------------------

	txa:pha

	ldx #0
	ldy #0

loop	cpy count
	bne @+
	cpx count+1
	beq stop

@	:8 lda:cmp:req vcount

	iny
	sne
	inx

	bne loop

stop	pla:tax


; -----------------------------------------------------------

COUNT	= DATAORIGIN+$0017

@VarData	= COUNT
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER


; ---------------------  ASM Block 050  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$0019

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	GOTOXY						; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex						; sub bx, 1


; ---------------------  ASM Block 051  ---------------------

	ldy x
	beq @+
	dey
	sty colcrs

@	ldy y
	beq @+
	dey
	sty rowcrs
@


; -----------------------------------------------------------

X	= DATAORIGIN+$001A
Y	= DATAORIGIN+$001B

@VarData	= X
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	WHEREY						; FUNCTION | ASSEMBLER


; ---------------------  ASM Block 053  ---------------------


	ldy rowcrs
	iny
	sty Result


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$001C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; -----------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0013
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $0000
CN_SELECT_OPTION	= $0001
CN_START_OPTION	= $0002
CN_OPTION	= $0003
CN_START_SELECT	= $0004
CN_SELECT	= $0005
CN_START	= $0006
CN_NONE	= $0007
BW40	= $0000
CO40	= $0001
BW80	= $0002
CO80	= $0003
MONO	= $0007
C40	= $0001
C80	= $0003
BLACK	= $0000
BLUE	= $0001
GREEN	= $0002
CYAN	= $0003
RED	= $0004
MAGENTA	= $0005
BROWN	= $0006
LIGHTGRAY	= $0007
DARKGRAY	= $0008
LIGHTBLUE	= $0009
LIGHTGREEN	= $000A
LIGHTCYAN	= $000B
LIGHTRED	= $000C
LIGHTMAGENTA	= $000D
YELLOW	= $000E
WHITE	= $000F
BLINK	= $0080

.endl							; UNIT CRT

; -----------------------------------------------------------

.local	RMT						; UNIT

; -----------------------------------------------------------


.endl							; UNIT RMT

; -----------------------------------------------------------

.local	B_UTILS						; UNIT

.local	NULLTERMTOSTRING				; FUNCTION

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x PTR
	mva :STACKORIGIN+STACKWIDTH,x PTR+1
	dex						; sub bx, 1

	ift l_01A0-*>3
	jmp l_01A0
	eif

; IfThenEpilog
l_01A0

; optimize OK (B_UTILS), line = 81

	mva #$00 adr.RESULT+$00

; --- WhileProlog
l_01A6

; optimize OK (B_UTILS), line = 82

	lda PTR+1
	sta :bp+1
	ldy PTR
	lda (:bp),y
	ldy #1
	cmp #$00
	bne @+
	dey
@
	tya
	bne *+5
	jmp l_01B5

; optimize OK (B_UTILS), line = 83

	inc adr.RESULT+$00

; optimize OK (B_UTILS), line = 84

	lda adr.RESULT+$00
	sta :STACKORIGIN+9
	lda PTR+1
	sta :bp+1
	ldy PTR
	lda (:bp),y
	ldy :STACKORIGIN+9
	sta adr.RESULT,y

; optimize FAIL (0, B_UTILS), line = 85
	inw PTR

; --- WhileDoEpilog
c_01A6

; WhileDoEpilog
	jmp l_01A6
l_01B5
b_01A6

@exit

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

PTR	= DATAORIGIN+$002D
adr.RESULT	= DATAORIGIN+$002F
.var RESULT	= adr.RESULT .word

@VarData	= PTR
@VarDataSize	= 258

	rts						; ret
.endl

; -----------------------------------------------------------


.endl							; UNIT B_UTILS

; -----------------------------------------------------------

.local	B_DL						; UNIT

; -----------------------------------------------------------

DL_BLANK1	= $0000
DL_BLANK2	= $0010
DL_BLANK3	= $0020
DL_BLANK4	= $0030
DL_BLANK5	= $0040
DL_BLANK6	= $0050
DL_BLANK7	= $0060
DL_BLANK8	= $0070
DL_DLI	= $0080
DL_LMS	= $0040
DL_VSCROLL	= $0020
DL_HSCROLL	= $0010
DL_MODE_40X24T2	= $0002
DL_MODE_40X24T5	= $0004
DL_MODE_40X12T5	= $0005
DL_MODE_20X24T5	= $0006
DL_MODE_20X12T5	= $0007
DL_MODE_40X24G4	= $0008
DL_MODE_80X48G2	= $0009
DL_MODE_80X48G4	= $000A
DL_MODE_160X96G2	= $000B
DL_MODE_160X192G2	= $000C
DL_MODE_160X96G4	= $000D
DL_MODE_160X192G4	= $000E
DL_MODE_320X192G2	= $000F
DL_JMP	= $0001
DL_JVB	= $0041
DL_ADDRESS	= DATAORIGIN+$012F
DL_CURSOR	= DATAORIGIN+$0131

.endl							; UNIT B_DL

; -----------------------------------------------------------

.local	B_SYSTEM					; UNIT

; -----------------------------------------------------------

__NMIEN	= DATAORIGIN+$0132
PORTB_SELFTEST_OFF	= $0080
PORTB_BASIC_OFF	= $0002
PORTB_SYSTEM_ON	= $0001

.endl							; UNIT B_SYSTEM

.local	DLI1						; PROCEDURE | ASSEMBLER | INTERRUPT


; ---------------------  ASM Block 069  ---------------------


        pha
        lda $d20a
        sta $d01a
        sta ATARI.WSYNC
//        mva #$01 ATARI.COLOR0
//        mva #$02 ATARI.COLOR1
//        mva #$03 ATARI.COLOR2
//        mva #$04 ATARI.COLOR3
//        mva #$05 ATARI.COLOR4
//        mwa #DLI2 ATARI.VDSLST
        pla
        
	rti						; ret
.endl

.local	DLI2						; PROCEDURE | ASSEMBLER | INTERRUPT


; ---------------------  ASM Block 070  ---------------------


        pha
        sta ATARI.WSYNC
      //  mva #$00 ATARI.COLOR0
        mva #$0c ATARI.COLOR1
        mva #$00 ATARI.COLOR2
        mva #$00 ATARI.COLOR4
        mwa #DLI3 ATARI.VDSLST
        pla
        
	rti						; ret
.endl

.local	DLI3						; PROCEDURE | ASSEMBLER | INTERRUPT


; ---------------------  ASM Block 071  ---------------------


        pha
        mva #$06 ATARI.COLOR4
        :3 sta ATARI.WSYNC
        mva #$08 ATARI.COLOR4
        sta ATARI.WSYNC
        mva #$0a ATARI.COLOR4
        sta ATARI.WSYNC
        mva #$0c ATARI.COLOR4
        sta ATARI.WSYNC
        mva #$0a ATARI.COLOR4
        sta ATARI.WSYNC
        mva #$08 ATARI.COLOR4

      //  mwa #DLI1 ATARI.VDSLST
        pla
        
	rti						; ret
.endl

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT


; ---------------------  ASM Block 072  ---------------------


    phr ; store registers

;   *** example test routine
;    mva 20 atari.colbk // blink background

;   *** RMT play routine
;    lda MSX
;    ldy MSX+1
;    jsr RMT.TRMT.PLAY
;    mwa #dli1 ATARI.VDSLST

    plr ; restore registers
    jmp $E462 ; jump to system VBL handler

	rti						; ret
.endl

.local	CLRLINE						; PROCEDURE

	ift l_01D6-*>3
	jmp l_01D6
	eif

; IfThenEpilog
l_01D6

; optimize FAIL ('CRT.WHEREY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 39
	inx
	mva #$58 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr SYSTEM.DPEEK
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	jsr CRT.WHEREY
	inx
	mva #$28 :STACKORIGIN,x
	jsr imulBYTE
	jsr movaBX_EAX
	dex
	jsr addAX_CX
	mva #$29 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	jsr subEAX_ECX
	mva #$28 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr SYSTEM.FILLCHAR_011F

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	LOADITEMS					; PROCEDURE

	ift l_01F0-*>3
	jmp l_01F0
	eif

; IfThenEpilog
l_01F0
; For

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 95

	mva #$00 I

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 95

; To
l_01FF

; ForToDoCondition

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 95

	lda I
	cmp #$16
	bcc *+7
	beq *+5

; ForToDoProlog
	jmp l_020D

; optimize FAIL ('B_UTILS.NULLTERMTOSTRING', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 99
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	lda ITEMSTRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda ITEMSTRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_UTILS.NULLTERMTOSTRING
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.ITEMS,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.ITEMS+1,y
	dex
	dex

; ForToDoEpilog
c_01FF
	inc I						; inc ptr byte [CounterAddress]

	seq

; WhileDoEpilog
	jmp l_01FF
l_020D
b_01FF

; -----------------------------------------------------------

I	= DATAORIGIN+$0196
adr.S	= DATAORIGIN+$0197
.var S	= adr.S .word
adr.ITEMSTRINGS	= $5E00
.var ITEMSTRINGS	= adr.ITEMSTRINGS .word
@FORTMP_505	= $0016

@VarData	= I
@VarDataSize	= 259


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	LOADLOCATIONS					; PROCEDURE

	ift l_0222-*>3
	jmp l_0222
	eif

; IfThenEpilog
l_0222
; For

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 111

	mva #$00 I

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 111

; To
l_0231

; ForToDoCondition

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 111

	lda I
	cmp #$0F
	bcc *+7
	beq *+5

; ForToDoProlog
	jmp l_023F

; optimize FAIL ('B_UTILS.NULLTERMTOSTRING', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 113
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	lda LOCATIONSTRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda LOCATIONSTRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_UTILS.NULLTERMTOSTRING
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.LOCATIONS,y
	lda :STACKORIGIN+STACKWIDTH,x
	sta adr.LOCATIONS+1,y
	dex
	dex

; ForToDoEpilog
c_0231
	inc I						; inc ptr byte [CounterAddress]

	seq

; WhileDoEpilog
	jmp l_0231
l_023F
b_0231

; -----------------------------------------------------------

I	= DATAORIGIN+$0297
adr.S	= DATAORIGIN+$0298
.var S	= adr.S .word
adr.LOCATIONSTRINGS	= $5C00
.var LOCATIONSTRINGS	= adr.LOCATIONSTRINGS .word
@FORTMP_555	= $000F

@VarData	= I
@VarDataSize	= 259


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	START						; PROCEDURE

	ift l_0254-*>3
	jmp l_0254
	eif

; IfThenEpilog
l_0254

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 129

	mva #$88 PLAYER.UEC
	mva #$13 PLAYER.UEC+1
	mva #$00 PLAYER.UEC+2
	sta PLAYER.UEC+3

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 130

	mva #$00 PLAYER.LOC

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	CONSOLE_NAVIGATION				; PROCEDURE

	ift l_0266-*>3
	jmp l_0266
	eif

; IfThenEpilog
l_0266

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 136
	inx
	mva #$01 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 136
	jsr CLRLINE

	@printSTRING #CODEORIGIN+$0002

; Array index LOCATIONS[0..15]

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva PLAYER.LOC :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x		; expand to WORD

	m@index2 0

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	ldy :STACKORIGIN,x				; si
	mva adr.LOCATIONS,y :STACKORIGIN,x
	mva adr.LOCATIONS+1,y :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 138
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 138
	jsr CLRLINE

	@printSTRING #CODEORIGIN+$0007
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 140
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 140
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 141
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 141
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 142
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 142
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 143
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 143
	jsr CLRLINE

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $0000000C (12)

	inx						; add bx, 1
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 145
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$07 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 145
	jsr CLRLINE

; --- RepeatUntilProlog
l_029A

; optimize FAIL ('CRT.KEYPRESSED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 149
	jsr CRT.KEYPRESSED
	.ifdef IFTMP_23
	lda :STACKORIGIN,x
	sta IFTMP_23
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_02A4

; optimize FAIL ('CRT.READKEY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 150
	jsr CRT.READKEY
	mva :STACKORIGIN,x KEYVAL
	dex

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva KEYVAL :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #98
	beq @+

; GenerateCaseStatementProlog
	jmp l_02BA
@

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 152

	mva #$01 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0002
l_02BA

; GenerateIfElseEpilog

; GenerateCaseEpilog

; GenerateIfElseEpilog
a_0002

; IfThenEpilog
l_02A4

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 155

	ldy #1
	lda KEYVAL
	cmp #$62
	beq @+
	dey
@
	tya
	bne *+5
c_029A
	jmp l_029A
b_029A

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	CONSOLE_TRADE					; PROCEDURE

	ift l_02D9-*>3
	jmp l_02D9
	eif

; IfThenEpilog
l_02D9

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 162

	mva #$00 ATARI.SDLSTL
	mva #$60 ATARI.SDLSTL+1
; For

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 163

	mva #$01 Y

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 163

; To
l_02EF

; ForToDoCondition

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 163

	lda Y
	cmp #$28
	bcc *+7
	beq *+5

; ForToDoProlog
	jmp l_02FD

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 165
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 165
	jsr CLRLINE

; ForToDoEpilog
c_02EF
	inc Y						; inc ptr byte [CounterAddress]

	seq

; WhileDoEpilog
	jmp l_02EF
l_02FD
b_02EF

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 167
	inx
	mva #$01 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('SYSTEM.STR', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 168
	inx
	mva PLAYER.UEC :STACKORIGIN,x
	mva PLAYER.UEC+1 :STACKORIGIN+STACKWIDTH,x
	mva PLAYER.UEC+2 :STACKORIGIN+STACKWIDTH*2,x
	mva PLAYER.UEC+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva UEC :STACKORIGIN,x
	mva UEC+1 :STACKORIGIN+STACKWIDTH,x
	jsr SYSTEM.STR

; Array index LOCATIONS[0..15]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000000 (0)

	inx						; add bx, 1
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	ldy :STACKORIGIN,x				; si
	mva adr.LOCATIONS,y :STACKORIGIN,x
	mva adr.LOCATIONS+1,y :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1

	@printSTRING #CODEORIGIN+$0022

; -----------------------------------------------------------

; Push CARDINAL / INTEGER / REAL / SINGLE
; as Pointer

	inx						; add bx, 1
	mva PLAYER.UEC :STACKORIGIN,x
	mva PLAYER.UEC+1 :STACKORIGIN+STACKWIDTH,x
	mva PLAYER.UEC+2 :STACKORIGIN+STACKWIDTH*2,x
	mva PLAYER.UEC+3 :STACKORIGIN+STACKWIDTH*3,x

	jsr @printCARD
	dex						; sub bx, 1

	@printSTRING #CODEORIGIN+$0030
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 171
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr CRT.GOTOXY

	@printSTRING #CODEORIGIN+$0036
	@printEOL

	@printSTRING #CODEORIGIN+$0060
	@printEOL

	@printSTRING #CODEORIGIN+$008A
	@printEOL

	@printSTRING #CODEORIGIN+$00B4
	@printEOL
	@printEOL

	@printSTRING #CODEORIGIN+$00B4
	@printEOL

; --- RepeatUntilProlog
l_0335

; optimize FAIL ('CRT.KEYPRESSED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 182
	jsr CRT.KEYPRESSED
	.ifdef IFTMP_24
	lda :STACKORIGIN,x
	sta IFTMP_24
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_033F

; optimize FAIL ('CRT.READKEY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 183
	jsr CRT.READKEY
	mva :STACKORIGIN,x KEYVAL
	dex

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva KEYVAL :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #98
	beq @+

; GenerateCaseStatementProlog
	jmp l_0355
@

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 185

	mva #$01 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0003
l_0355

; GenerateIfElseEpilog

; GenerateCaseEpilog

; GenerateIfElseEpilog
a_0003

; IfThenEpilog
l_033F

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 188

	ldy #1
	lda KEYVAL
	cmp #$62
	beq @+
	dey
@
	tya
	bne *+5
c_0335
	jmp l_0335
b_0335

; -----------------------------------------------------------

Y	= DATAORIGIN+$0398
adr.UEC	= DATAORIGIN+$0399
.var UEC	= adr.UEC .word
@FORTMP_745	= $0028

@VarData	= Y
@VarDataSize	= 257


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	MENU						; PROCEDURE

	ift l_0374-*>3
	jmp l_0374
	eif

; IfThenEpilog
l_0374

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 193

	mva #$00 ATARI.SDLSTL
	mva #$5F ATARI.SDLSTL+1

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 195
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 195
	jsr CLRLINE

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000006 (6)

	inx						; add bx, 1
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 197
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 197
	jsr CLRLINE

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000008 (8)

	inx						; add bx, 1
	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 199
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 199
	jsr CLRLINE

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $0000000C (12)

	inx						; add bx, 1
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 201
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 201
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 202
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 202
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 203
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 203
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 204
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$07 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 204
	jsr CLRLINE

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 205

	mva #$00 KEYVAL

; --- RepeatUntilProlog
l_03B7

; optimize FAIL ('CRT.KEYPRESSED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 209
	jsr CRT.KEYPRESSED
	.ifdef IFTMP_25
	lda :STACKORIGIN,x
	sta IFTMP_25
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_03C1

; optimize FAIL ('CRT.READKEY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 210
	jsr CRT.READKEY
	mva :STACKORIGIN,x KEYVAL
	dex

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva KEYVAL :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #49
	beq @+

; GenerateCaseStatementProlog
	jmp l_03D7
@

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 212

	mva #$02 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0004
l_03D7

; GenerateIfElseEpilog

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #50
	beq @+

; GenerateCaseStatementProlog
	jmp l_03E9
@

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 213

	mva #$03 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0004
l_03E9

; GenerateIfElseEpilog

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #98
	beq @+

; GenerateCaseStatementProlog
	jmp l_03FB
@

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 214

	mva #$00 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0004
l_03FB

; GenerateIfElseEpilog

; GenerateCaseEpilog

; GenerateIfElseEpilog

; GenerateIfElseEpilog

; GenerateIfElseEpilog
a_0004

; IfThenEpilog
l_03C1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 217

	ldy #1
	lda KEYVAL
	cmp #$62
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda KEYVAL
	cmp #$31
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda KEYVAL
	cmp #$32
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	bne *+5
c_03B7
	jmp l_03B7
b_03B7

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	TITLE						; PROCEDURE

	ift l_0434-*>3
	jmp l_0434
	eif

; IfThenEpilog
l_0434

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 225

	mva #$00 ATARI.SDLSTL
	mva #$5F ATARI.SDLSTL+1

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000002 (2)

	inx						; add bx, 1
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	@moveSTRING STR
	dex						; sub bx, 1

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 233
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 233
	jsr CLRLINE

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva STR :STACKORIGIN,x
	mva STR+1 :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000004 (4)

	inx						; add bx, 1
	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	@moveSTRING STR
	dex						; sub bx, 1

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 236
	inx
	mva #$0F :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 236
	jsr CLRLINE

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva STR :STACKORIGIN,x
	mva STR+1 :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 238
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 238
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 239
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 239
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 240
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 240
	jsr CLRLINE

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 241
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 241
	jsr CLRLINE

; Array index STRINGS[0..0]

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000000 (0)

	inx						; add bx, 1
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer to Array Origin


	lda STRINGS
	add :STACKORIGIN,x
	sta :bp2
	lda STRINGS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN,x
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH,x

	jsr B_UTILS.NULLTERMTOSTRING			; call Entry


	@moveSTRING STR
	dex						; sub bx, 1

; optimize FAIL ('CRT.GOTOXY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 243
	inx
	mva #$15 :STACKORIGIN,x
	inx
	mva #$07 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL ('CLRLINE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 243
	jsr CLRLINE

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva STR :STACKORIGIN,x
	mva STR+1 :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 248

	mva #$00 KEYVAL

; --- RepeatUntilProlog
l_047D

; optimize FAIL ('CRT.KEYPRESSED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 252
	jsr CRT.KEYPRESSED
	.ifdef IFTMP_26
	lda :STACKORIGIN,x
	sta IFTMP_26
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_0487

; optimize FAIL ('CRT.READKEY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 253
	jsr CRT.READKEY
	mva :STACKORIGIN,x KEYVAL
	dex

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva KEYVAL :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #110
	beq @+

; GenerateCaseStatementProlog
	jmp l_049D
@

; optimize FAIL ('START', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 256
	jsr START

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 257

	mva #$01 CURRENT_MENU

; GenerateCaseStatementEpilog
	jmp a_0005
l_049D

; GenerateIfElseEpilog

; GenerateCaseEpilog

; GenerateIfElseEpilog
a_0005

; IfThenEpilog
l_0487

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 275

	ldy #1
	lda KEYVAL
	cmp #$71
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda KEYVAL
	cmp #$6E
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	bne *+5
c_047D
	jmp l_047D
b_047D

; -----------------------------------------------------------

adr.STR	= DATAORIGIN+$0499
.var STR	= adr.STR .word

@VarData	= STR
@VarDataSize	= 256


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	FADE						; PROCEDURE

	ift l_04C9-*>3
	jmp l_04C9
	eif

; IfThenEpilog
l_04C9
; For

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 288

	mva #$00 I

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 288

; To
l_04D8

; ForToDoCondition

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 288

	lda I
	cmp #$06
	bcc *+7
	beq *+5

; ForToDoProlog
	jmp l_04E6

; optimize FAIL ('CRT.TEXTBACKGROUND', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 290
	inx
	ldy I 
	mva adr.FADECOLORS,y :STACKORIGIN,x
	jsr CRT.TEXTBACKGROUND

; optimize FAIL ('CRT.DELAY', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 291
	inx
	mva #$23 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CRT.DELAY

; ForToDoEpilog
c_04D8
	inc I						; inc ptr byte [CounterAddress]

	seq

; WhileDoEpilog
	jmp l_04D8
l_04E6
b_04D8

; optimize FAIL ('CRT.TEXTCOLOR', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 294
	inx
	mva #$06 :STACKORIGIN,x
	jsr CRT.TEXTCOLOR

; -----------------------------------------------------------

adr.FADECOLORS	= DATAORIGIN+$0599
.var FADECOLORS	= adr.FADECOLORS .word
I	= DATAORIGIN+$05A0
@FORTMP_1234	= DATAORIGIN+$05A1

@VarData	= FADECOLORS
@VarDataSize	= 9


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; IfThenEpilog
l_00E5

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 308

	mva #$00 ATARI.SAVMSC
	mva #$61 ATARI.SAVMSC+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 310

	mva #$00 ATARI.LMARGIN

; optimize FAIL ('FADE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 311
	jsr FADE

; optimize FAIL ('CRT.CURSOROFF', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 312
	jsr CRT.CURSOROFF

	lda VVBLKD
	sta OLDVBL
	lda VVBLKD+1
	sta OLDVBL+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 322

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 323

	mva #$C0 ATARI.NMIEN

	lda VDSLST
	sta OLDDLI
	lda VDSLST+1
	sta OLDDLI+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 327

	mva <DLI1 VDSLST
	mva >DLI1 VDSLST+1

; optimize FAIL ('LOADLOCATIONS', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 333
	jsr LOADLOCATIONS

; optimize FAIL ('LOADITEMS', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 334
	jsr LOADITEMS

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 336

	mva #$00 CURRENT_MENU

; --- RepeatUntilProlog
l_0518

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva CURRENT_MENU :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	beq @+

; GenerateCaseStatementProlog
	jmp l_0526
@

; optimize FAIL ('TITLE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 340
	jsr TITLE

; GenerateCaseStatementEpilog
	jmp a_0006
l_0526

; GenerateIfElseEpilog

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #1
	beq @+

; GenerateCaseStatementProlog
	jmp l_0532
@

; optimize FAIL ('MENU', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 342
	jsr MENU

; GenerateCaseStatementEpilog
	jmp a_0006
l_0532

; GenerateIfElseEpilog

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #2
	beq @+

; GenerateCaseStatementProlog
	jmp l_053E
@

; optimize FAIL ('CONSOLE_NAVIGATION', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 343
	jsr CONSOLE_NAVIGATION

; GenerateCaseStatementEpilog
	jmp a_0006
l_053E

; GenerateIfElseEpilog

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #3
	beq @+

; GenerateCaseStatementProlog
	jmp l_054A
@

; optimize FAIL ('CONSOLE_TRADE', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 344
	jsr CONSOLE_TRADE

; GenerateCaseStatementEpilog
	jmp a_0006
l_054A

; GenerateIfElseEpilog

; GenerateCaseEpilog

; GenerateIfElseEpilog

; GenerateIfElseEpilog

; GenerateIfElseEpilog

; GenerateIfElseEpilog
a_0006

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 347

	ldy #1
	lda KEYVAL
	cmp #$71
	beq @+
	dey
@
	.ifdef IFTMP_27
	sty IFTMP_27
	eif
	tya
	bne *+5
	jmp l_0565

	jmp b_0518					; break

; IfThenEpilog
l_0565

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 348

	lda #$00
	bne *+5
c_0518
	jmp l_0518
b_0518

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 351

	lda OLDVBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda OLDVBL+1
	sta VVBLKD+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 352

	mva OLDDLI VDSLST
	mva OLDDLI+1 VDSLST+1

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 353

	mva #$40 ATARI.NMIEN

; optimize FAIL ('CRT.CURSORON', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\starvagrant.pas), line = 356
	jsr CRT.CURSORON

; -----------------------------------------------------------

FREE_BOTTOM	= $5B00
STRINGS_ADDRESS	= $5B00
LOCATIONS_ADDRESS	= $5C00
ITEMS_ADDRESS	= $5E00
DISPLAY_LIST_ADDRESS_MENU	= $5F00
DISPLAY_LIST_ADDRESS_CONSOLE	= $6000
VIDEO_RAM_ADDRESS	= $6100
GFX_ADDRESS	= $7000
RMT_PLAYER_ADDRESS	= $8A00
RMT_MODULE_ADDRESS	= $9200
NUMBEROFLOCATIONS	= $000F
NUMBEROFITEMS	= $0016
TXTCOL	= $0028
KEY_OPTION1	= $0031
KEY_OPTION2	= $0032
KEY_OPTION3	= $0033
KEY_OPTION4	= $0034
KEY_BACK	= $0062
KEY_QUIT	= $0071
KEY_NEW	= $006E
MENU_TITLE	= $0000
MENU_MAIN	= $0001
MENU_NAV	= $0002
MENU_TRADE	= $0003
MENU_MAINT	= $0004
KEYVAL	= DATAORIGIN+$0133
adr.MSX	= DATAORIGIN+$0134
.var MSX	= adr.MSX .word
MSX.PLAYER	= DATAORIGIN+$0134
MSX.MODUL	= DATAORIGIN+$0136
OLDVBL	= DATAORIGIN+$0138
OLDDLI	= DATAORIGIN+$013A
adr.STRINGS	= $5B00
.var STRINGS	= adr.STRINGS .word
CURRENT_MENU	= DATAORIGIN+$013C
adr.PLAYER	= DATAORIGIN+$013D
.var PLAYER	= adr.PLAYER .word
PLAYER.UEC	= DATAORIGIN+$013D
PLAYER.LOC	= DATAORIGIN+$0141
adr.PLAYER.SHIP	= DATAORIGIN+$0142
.var PLAYER.SHIP	= adr.PLAYER.SHIP .word
PLAYER.SHIP.SNAME	= DATAORIGIN+$0142
PLAYER.SHIP.SCU_MAX	= DATAORIGIN+$0144
PLAYER.SHIP.SCU	= DATAORIGIN+$0146
adr.LOCATIONS	= DATAORIGIN+$0148
.var LOCATIONS	= adr.LOCATIONS .word
adr.ITEMS	= DATAORIGIN+$0168
.var ITEMS	= adr.ITEMS .word

@exit

@halt	ldx #0
	txs

	rts

IOCB@COPY	:16 brk

.local	@DEFINES
ATARI
.endl

.endl

; -----------------------------------------------------------

	icl 'cpu6502.asm'

; -----------------------------------------------------------

.macro UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN..@UnitInit
	jsr MAIN..@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.RMT.@UnitInit
	jsr MAIN.RMT.@UnitInit
	eif

	.ifdef MAIN..@UnitInit
	jsr MAIN..@UnitInit
	eif

	.ifdef MAIN.B_UTILS.@UnitInit
	jsr MAIN.B_UTILS.@UnitInit
	eif

	.ifdef MAIN..@UnitInit
	jsr MAIN..@UnitInit
	eif

	.ifdef MAIN.B_DL.@UnitInit
	jsr MAIN.B_DL.@UnitInit
	eif

	.ifdef MAIN..@UnitInit
	jsr MAIN..@UnitInit
	eif

	.ifdef MAIN.B_SYSTEM.@UnitInit
	jsr MAIN.B_SYSTEM.@UnitInit
	eif
.endm

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.RMT) > 0
	.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
	eif

	ift .SIZEOF(MAIN.B_UTILS) > 0
	.print 'B_UTILS: ',MAIN.B_UTILS,'..',MAIN.B_UTILS+.SIZEOF(MAIN.B_UTILS)-1
	eif

	ift .SIZEOF(MAIN.B_DL) > 0
	.print 'B_DL: ',MAIN.B_DL,'..',MAIN.B_DL+.SIZEOF(MAIN.B_DL)-1
	eif

	ift .SIZEOF(MAIN.B_SYSTEM) > 0
	.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

DATAORIGIN

.by  $28 $00 $18 $00 $0C $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $95 $94 $93 $92 $91 $90

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1442

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; -----------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $03 $4C $3A $20 $00 $19  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $00 $0C $20 $5B $42 $75 $79  $5D $20 $53 $65 $6C $6C $20 $00
.by  $04 $20 $55 $45 $43 $00 $28 $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $00
.by  $28 $2F $44 $65 $6C $69 $76 $65  $72 $79 $5F $4C $6F $63 $61 $74  $69 $6F $6E $73 $20 $7C $20 $2E
.by  $2E $2F $41 $76 $61 $69 $6C $61  $62 $6C $65 $5F $49 $74 $65 $6D  $73 $00 $28 $5B $20 $43 $75 $74
.by  $74 $6C $65 $73 $20 $42 $6C $61  $63 $6B $20 $5D $20 $20 $20 $7C  $20 $63 $6F $6D $6D $6F $64 $69
.by  $74 $79 $20 $20 $20 $20 $70 $72  $69 $63 $65 $00 $28 $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2B $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
.by  $2D $2D $2D $2D $2D $00
.endm

	end
