STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

	org $80

	.print 'ZPFREE: $0000..',*-1

fxptr	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4

	.print 'ZPFREE: ',*,'..',$ff

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; -----------------------------------------------------------

	org CODEORIGIN

	STATICDATA

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

	ift DATAORIGIN+VARINITSIZE > $BFFF
	ert 'Invalid memory address range ',DATAORIGIN+VARINITSIZE
	els
	@fill #DATAORIGIN+VARINITSIZE #VARDATASIZE-VARINITSIZE #0
	eif

	ldx #$0f
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	mvx #$00 bp					; lo BP = 0, X = 0 !!!

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	ift l_0030-*>3
	jmp l_0030
	eif

; -----------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; -----------------------------------------------------------

A	= edx
VALUE	= ecx

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VALUE
	mva :STACKORIGIN+STACKWIDTH,x VALUE+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 022  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; -----------------------------------------------------------

A	= edx
VALUE	= ecx

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	MOVE_0064					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex						; sub bx, 1


; ---------------------  ASM Block 033  ---------------------

	jsr @move


; -----------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	PAUSE_0080					; PROCEDURE | ASSEMBLER | OVERLOAD


; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; -----------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $0004
MGTIA	= $0000
MVBXE	= $0080
WINDOW	= $0010
NARROW	= $0020
VBXE_XDLADR	= $0000
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $0000
IVBL	= $0001
CH_DELCHR	= $00FE
CH_ENTER	= $009B
CH_ESC	= $001B
CH_CURS_UP	= $001C
CH_CURS_DOWN	= $001D
CH_CURS_LEFT	= $001E
CH_CURS_RIGHT	= $001F
CH_TAB	= $007F
CH_EOL	= $009B
CH_CLR	= $007D
CH_BELL	= $00FD
CH_DEL	= $007E
CH_DELLINE	= $009C
CH_INSLINE	= $009D
COLOR_BLACK	= $0000
COLOR_WHITE	= $000E
COLOR_RED	= $0032
COLOR_CYAN	= $0096
COLOR_VIOLET	= $0068
COLOR_GREEN	= $00C4
COLOR_BLUE	= $0074
COLOR_YELLOW	= $00EE
COLOR_ORANGE	= $004A
COLOR_BROWN	= $00E4
COLOR_LIGHTRED	= $003C
COLOR_GRAY1	= $0004
COLOR_GRAY2	= $0006
COLOR_GRAY3	= $000A
COLOR_LIGHTGREEN	= $00CC
COLOR_LIGHTBLUE	= $007C
FMOPENREAD	= $0004
FMOPENWRITE	= $0008
FMOPENAPPEND	= $0009
FMOPENREADWRITE	= $000C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
FILEMODE	= DATAORIGIN+$0004
SCREENMODE	= DATAORIGIN+$0005
IORESULT	= DATAORIGIN+$0006
EOLN	= DATAORIGIN+$0007
RNDSEED	= DATAORIGIN+$0008

.endl							; UNIT SYSTEM

; -----------------------------------------------------------

.local	ATARI						; UNIT

; -----------------------------------------------------------

RTCLOK	= $0012
ATRACT	= $004D
LMARGIN	= $0052
RMARGIN	= $0053
ROWCRS	= $0054
COLCRS	= $0055
DINDEX	= $0057
SAVMSC	= $0058
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; -----------------------------------------------------------

.local	B_DL						; UNIT

.local	DL_INIT						; PROCEDURE

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x ADDRESS
	mva :STACKORIGIN+STACKWIDTH,x ADDRESS+1
	dex						; sub bx, 1

	ift l_008A-*>3
	jmp l_008A
	eif

; IfThenEpilog
l_008A

; optimize OK (B_DL), line = 160

	mva ADDRESS DL_ADDRESS
	mva ADDRESS+1 DL_ADDRESS+1

; optimize OK (B_DL), line = 161

	mva #$00 DL_CURSOR

; -----------------------------------------------------------

ADDRESS	= DATAORIGIN+$000D

@VarData	= ADDRESS
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_PUSH_009A					; PROCEDURE | OVERLOAD

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

	ift l_00A3-*>3
	jmp l_00A3
	eif

; IfThenEpilog
l_00A3

; optimize OK (B_DL), line = 166

	lda DL_ADDRESS
	add DL_CURSOR
	tay
	lda DL_ADDRESS+1
	adc #$00
	sta :bp+1
	lda VALUE
	sta (:bp),y

; optimize FAIL (0, B_DL), line = 167
	inc DL_CURSOR

; -----------------------------------------------------------

VALUE	= DATAORIGIN+$000F

@VarData	= VALUE
@VarDataSize	= 1


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_PUSH_00B4					; PROCEDURE | OVERLOAD

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COUNT
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

	ift l_00C3-*>3
	jmp l_00C3
	eif

; IfThenEpilog
l_00C3

; --- WhileProlog
l_00C4

; optimize OK (B_DL), line = 172

	lda COUNT
	cmp #$00
	seq
	bcs @+
	jmp l_00D3
@

; optimize FAIL ('DL_PUSH_009A', B_DL), line = 173
	inx
	mva VALUE :STACKORIGIN,x
	jsr DL_PUSH_009A

; optimize FAIL (0, B_DL), line = 174
	dec COUNT

; --- WhileDoEpilog
c_00C4

; WhileDoEpilog
	jmp l_00C4
l_00D3
b_00C4

; -----------------------------------------------------------

VALUE	= DATAORIGIN+$0010
COUNT	= DATAORIGIN+$0011

@VarData	= VALUE
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_PUSH_00DD					; PROCEDURE | OVERLOAD

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x ADDRESS
	mva :STACKORIGIN+STACKWIDTH,x ADDRESS+1
	dex						; sub bx, 1

	ift l_00E6-*>3
	jmp l_00E6
	eif

; IfThenEpilog
l_00E6

; optimize FAIL ('DL_PUSH_009A', B_DL), line = 180
	inx
	mva ADDRESS :STACKORIGIN,x
	mva ADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DL_PUSH_009A

; optimize FAIL ('DL_PUSH_009A', B_DL), line = 181
	inx
	mva ADDRESS :STACKORIGIN,x
	mva ADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr hiWORD
	jsr DL_PUSH_009A

; -----------------------------------------------------------

ADDRESS	= DATAORIGIN+$0012

@VarData	= ADDRESS
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_PUSH_00ED					; PROCEDURE | OVERLOAD

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x ADDRESS
	mva :STACKORIGIN+STACKWIDTH,x ADDRESS+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

	ift l_00FC-*>3
	jmp l_00FC
	eif

; IfThenEpilog
l_00FC

; optimize FAIL ('DL_PUSH_009A', B_DL), line = 186
	inx
	mva VALUE :STACKORIGIN,x
	jsr DL_PUSH_009A

; optimize FAIL ('DL_PUSH_00DD', B_DL), line = 187
	inx
	mva ADDRESS :STACKORIGIN,x
	mva ADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DL_PUSH_00DD

; -----------------------------------------------------------

VALUE	= DATAORIGIN+$0014
ADDRESS	= DATAORIGIN+$0015

@VarData	= VALUE
@VarDataSize	= 3


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_START					; PROCEDURE

	ift l_0107-*>3
	jmp l_0107
	eif

; IfThenEpilog
l_0107

; optimize FAIL ('SYSTEM.PAUSE_0080', B_DL), line = 192
	jsr SYSTEM.PAUSE_0080

; optimize OK (B_DL), line = 193

	mva DL_ADDRESS ATARI.SDLSTL
	mva DL_ADDRESS+1 ATARI.SDLSTL+1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	DL_POKEW					; PROCEDURE

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VAL
	mva :STACKORIGIN+STACKWIDTH,x VAL+1
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x OFFSET
	dex						; sub bx, 1

	ift l_0122-*>3
	jmp l_0122
	eif

; IfThenEpilog
l_0122

; optimize OK (B_DL), line = 231

	mva OFFSET DL_CURSOR

; optimize OK (B_DL), line = 232

	lda DL_ADDRESS
	add DL_CURSOR
	sta :bp2
	lda DL_ADDRESS+1
	adc #$00
	sta :bp2+1
	ldy #$00
	lda VAL
	sta (:bp2),y
	iny
	lda VAL+1
	sta (:bp2),y

; -----------------------------------------------------------

OFFSET	= DATAORIGIN+$0017
VAL	= DATAORIGIN+$0018

@VarData	= OFFSET
@VarDataSize	= 3


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; -----------------------------------------------------------

DL_BLANK1	= $0000
DL_BLANK2	= $0010
DL_BLANK3	= $0020
DL_BLANK4	= $0030
DL_BLANK5	= $0040
DL_BLANK6	= $0050
DL_BLANK7	= $0060
DL_BLANK8	= $0070
DL_DLI	= $0080
DL_LMS	= $0040
DL_VSCROLL	= $0020
DL_HSCROLL	= $0010
DL_MODE_40X24T2	= $0002
DL_MODE_40X24T5	= $0004
DL_MODE_40X12T5	= $0005
DL_MODE_20X24T5	= $0006
DL_MODE_20X12T5	= $0007
DL_MODE_40X24G4	= $0008
DL_MODE_80X48G2	= $0009
DL_MODE_80X48G4	= $000A
DL_MODE_160X96G2	= $000B
DL_MODE_160X192G2	= $000C
DL_MODE_160X96G4	= $000D
DL_MODE_160X192G4	= $000E
DL_MODE_320X192G2	= $000F
DL_JMP	= $0001
DL_JVB	= $0041
DL_ADDRESS	= DATAORIGIN+$000A
DL_CURSOR	= DATAORIGIN+$000C

.endl							; UNIT B_DL

; IfThenEpilog
l_0030

; optimize FAIL ('B_DL.DL_INIT', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 20
	inx
	mva #$00 :STACKORIGIN,x
	mva #$50 :STACKORIGIN+STACKWIDTH,x
	jsr B_DL.DL_INIT

; optimize FAIL ('B_DL.DL_PUSH_00B4', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 21
	inx
	mva #$70 :STACKORIGIN,x
	inx
	mva #$0C :STACKORIGIN,x
	jsr B_DL.DL_PUSH_00B4

; optimize FAIL ('B_DL.DL_PUSH_00ED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 22
	inx
	mva #$52 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$51 :STACKORIGIN+STACKWIDTH,x
	jsr B_DL.DL_PUSH_00ED

; optimize FAIL ('B_DL.DL_PUSH_00ED', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 23
	inx
	mva #$41 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$50 :STACKORIGIN+STACKWIDTH,x
	jsr B_DL.DL_PUSH_00ED

; optimize FAIL ('B_DL.DL_START', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 24
	jsr B_DL.DL_START

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 26

	lda S
	add #$01
	sta :edx
	lda S+1
	adc #$00
	sta :edx+1
	lda #$2A
	sta :ecx
	lda #$51
	sta :ecx+1
	lda #$00
	sta :eax
	lda #$01
	sta :eax+1
	jsr @move

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 27

	mva #$00 ATARI.COLOR2

; --- RepeatUntilProlog
l_014F

; optimize FAIL ('SYSTEM.PAUSE_0080', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 30
	jsr SYSTEM.PAUSE_0080

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 31

	ldy #1
	lda HSCROLL
	cmp #$FF
	beq @+
	dey
@
	.ifdef IFTMP_22
	sty IFTMP_22
	eif
	tya
	bne *+5
	jmp l_0162

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 32

	mva #$03 HSCROLL

; optimize FAIL ('imodCARD', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 33
	inx
	mva OFFSET :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr @expandToCARD1.BYTE
	jsr @expandToCARD.BYTE
	jsr addEAX_ECX
	mva #$50 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	jsr_imodCARD
	jsr movZTMP_aBX
	dex
	mva :STACKORIGIN,x OFFSET
	dex

; optimize FAIL ('B_DL.DL_POKEW', C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 34
	inx
	mva #$0D :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$51 :STACKORIGIN+STACKWIDTH,x
	inx
	mva OFFSET :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	jsr B_DL.DL_POKEW

; IfThenEpilog
l_0162

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 36

	mva HSCROLL ATARI.HSCROL

; optimize FAIL (0, C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 37
	dec HSCROLL

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 38

	lda BLANKSIZE
	add #$01
	and #$0F
	sta BLANKSIZE

; optimize OK (C:\Users\MADRAFi\Dropbox\Atari\DEV\StarVagrant\hscroll.pas), line = 40

	lda #$00
	bne *+5
c_014F
	jmp l_014F
b_014F

; -----------------------------------------------------------

DLIST	= $5000
VMEM	= $5100
HSCROLL	= DATAORIGIN+$001A
OFFSET	= DATAORIGIN+$001B
BLANKSIZE	= DATAORIGIN+$001C
adr.S	= DATAORIGIN+$001D
.var S	= adr.S .word
adr.BLANKS	= DATAORIGIN+$011D
.var BLANKS	= adr.BLANKS .word

@exit

@halt	ldx #0
	txs

	rts

IOCB@COPY	:16 brk

.local	@DEFINES
ATARI
.endl

.endl

; -----------------------------------------------------------

	icl 'cpu6502.asm'

; -----------------------------------------------------------

.macro UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN..@UnitInit
	jsr MAIN..@UnitInit
	eif

	.ifdef MAIN.B_DL.@UnitInit
	jsr MAIN.B_DL.@UnitInit
	eif
.endm

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.B_DL) > 0
	.print 'B_DL: ',MAIN.B_DL,'..',MAIN.B_DL+.SIZEOF(MAIN.B_DL)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

DATAORIGIN

.by  $28 $00 $18 $00 $0C $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $03 $00 $00 $27 $68 $65  $6C $6C $6F $01 $00 $69 $74 $00  $69 $73 $00 $61 $6E $00 $6A $75
.by  $6D $70 $69 $6E $67 $00 $70 $61  $73 $63 $61 $6C $00 $73 $63 $72  $6F $6C $6C $01 $01 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $70 $60 $50
.by  $40 $30 $20 $10 $00 $00 $10 $20  $30 $40 $50 $60 $70

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 301

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; -----------------------------------------------------------

.macro	STATICDATA
.by  $27 $68 $65 $6C $6C $6F $01 $00  $69 $74 $00 $69 $73 $00 $61 $6E  $00 $6A $75 $6D $70 $69 $6E $67
.by  $00 $70 $61 $73 $63 $61 $6C $00  $73 $63 $72 $6F $6C $6C $01 $01  $00
.endm

	end
